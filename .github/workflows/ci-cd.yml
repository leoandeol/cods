name: CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:  # Allow manual trigger

env:
  CACHE_VERSION: 1

jobs:
  # Fast initial checks - fail fast
  quick-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: Install ruff
        run: pip install ruff

      - name: Check formatting with ruff
        run: ruff format --check .

      - name: Lint with ruff
        run: ruff check . --output-format=github
        continue-on-error: false

  # Main test suite
  test:
    needs: quick-checks
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1 libegl1 libglib2.0-0

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run tests
        run: |
          pytest tests/ \
            --cov=cods \
            --cov-report=xml \
            --cov-report=term-missing \
            -n auto \
            --timeout=300 \
            -v
        continue-on-error: ${{ matrix.python-version == '3.13' }}  # Allow 3.13 to fail

      - name: Upload coverage
        uses: codecov/codecov-action@v5
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        with:
          files: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          fail_ci_if_error: false  # Don't fail CI if codecov upload fails
        continue-on-error: true

  # Multi-platform testing - only on main branch
  test-multiplatform:
    name: Test ${{ matrix.os }}
    if: github.ref == 'refs/heads/main'
    needs: quick-checks
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run tests
        run: |
          pytest tests/ -v --timeout=300
        continue-on-error: true

  # Type checking - separate job, non-blocking
  type-check:
    needs: quick-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install mypy
          pip install -e .

      - name: Type check with mypy
        run: mypy . --ignore-missing-imports --show-error-codes
        continue-on-error: true  # Don't fail CI on type errors

  # Integration/model tests - only on main/develop
  integration-tests:
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest

      - name: Download test assets (if needed)
        run: |
          # Add script to download test models/data
          # python scripts/download_test_assets.py
        continue-on-error: true

      - name: Run integration tests
        run: |
          pytest tests/ -m integration -v
        continue-on-error: true

  # Build package
  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build tools
        run: pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 7

  # Optional: Docker build (only on main)
  docker:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: your-detection-lib:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Summary job - always runs
  ci-success:
    needs: [quick-checks, test, build]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check CI status
        run: |
          if [ "${{ needs.quick-checks.result }}" != "success" ]; then
            echo "Quick checks failed"
            exit 1
          fi
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "Tests failed"
            exit 1
          fi
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "Build failed"
            exit 1
          fi
          echo "All required checks passed!"
