# File: create_splits.py (Final Version with Absolute Paths)
import os
import random

# --- Configuration ---
# The absolute path to the root of your dataset
DATASET_ROOT = "/datasets/shared_datasets/SNCF/DATASET_etat_feu"
IMAGES_DIR_NAME = "images"
# --- End Configuration ---


def create_four_way_split_files_absolute():
    """Scans the images directory and creates four split files (train.txt, etc.)
    containing the FULL, ABSOLUTE path to each image. This is the most
    robust method for the YOLO trainer.
    """
    images_dir_path = os.path.join(DATASET_ROOT, IMAGES_DIR_NAME)
    if not os.path.isdir(images_dir_path):
        print(
            f"FATAL ERROR: Images directory not found at '{images_dir_path}'"
        )
        return

    all_filenames = [
        f for f in os.listdir(images_dir_path) if f.endswith(".jpg")
    ]
    random.shuffle(all_filenames)
    total_files = len(all_filenames)

    # Define proportions
    train_prop, val_prop, calib_prop = 0.7, 0.1, 0.1
    train_end_idx = int(total_files * train_prop)
    val_end_idx = train_end_idx + int(total_files * val_prop)
    calib_end_idx = val_end_idx + int(total_files * calib_prop)

    # Create file lists
    train_files = all_filenames[:train_end_idx]
    val_files = all_filenames[train_end_idx:val_end_idx]
    calib_files = all_filenames[val_end_idx:calib_end_idx]
    test_files = all_filenames[calib_end_idx:]

    def write_split_file(split_name, file_list):
        # IMPORTANT: Construct the full, absolute path for each image
        # This is the key change that will fix the training error.
        paths_to_write = [
            os.path.abspath(os.path.join(images_dir_path, f))
            for f in file_list
        ]

        output_path = os.path.join(DATASET_ROOT, f"{split_name}.txt")
        with open(output_path, "w") as f:
            f.write("\n".join(paths_to_write))
        print(
            f"Created {split_name}.txt with {len(file_list)} absolute paths."
        )

    # Write all four files
    write_split_file("train", train_files)
    write_split_file("val", val_files)
    write_split_file("calib", calib_files)
    write_split_file("test", test_files)
    print("\nSplitting complete. Files now contain absolute paths.")
    print(
        f"Example path written to files: {os.path.abspath(os.path.join(images_dir_path, all_filenames[0]))}"
    )


def generate_yolo_yaml(
    dataset_root_path: str,
    class_names: dict,
    output_filename: str = "sncf_dataset.yaml",
):
    """Generates the YAML configuration file required by the Ultralytics YOLO trainer.

    Args:
        dataset_root_path (str): The absolute path to the root of the SNCF dataset.
        class_names (dict): A dictionary mapping class index (int) to class name (str).
        output_filename (str): The name of the YAML file to create.

    """
    # Create the dictionary structure that will be converted to YAML
    yaml_data = {
        "path": dataset_root_path,
        "train": "train.txt",
        "val": "val.txt",
        "test": "test.txt",  # YOLO uses this key for the test set
        "names": class_names,
    }

    # Convert the dictionary to a YAML formatted string
    # We do this manually to avoid needing a PyYAML dependency
    yaml_string = f"""
# YOLOv8 Dataset Configuration File
# Generated by prepare_yolo_config.py

# Path to dataset root directory
path: {yaml_data['path']}

# Train, validation, and test split files (relative to 'path')
train: {yaml_data['train']}
val: {yaml_data['val']}
test: {yaml_data['test']}

# Class names (order must match your label files)
names:
"""
    for index, name in yaml_data["names"].items():
        yaml_string += f"  {index}: {name}\n"

    # Write the string to the output file
    try:
        with open(dataset_root_path + "/" + output_filename, "w") as f:
            f.write(yaml_string)
        print(f"Successfully created '{output_filename}'")
    except OSError as e:
        print(f"Error writing to file '{output_filename}': {e}")


if __name__ == "__main__":
    create_four_way_split_files_absolute()
    # --- Configuration ---
    # IMPORTANT: Update this path to the correct root of your dataset
    DATASET_ROOT = "/datasets/shared_datasets/SNCF/DATASET_etat_feu"

    # IMPORTANT: Verify this dictionary matches your classes.txt and label indices
    with open(
        "/datasets/shared_datasets/SNCF/DATASET_etat_feu/classes.txt"
    ) as f:
        classes_raw = f.read().splitlines()
        classes_raw = [c.split(" ") for c in classes_raw if len(c) > 0]
    classes = {c[0]: " ".join(c[1:]) for c in classes_raw}
    # --- End Configuration ---

    # Generate the file
    generate_yolo_yaml(DATASET_ROOT, classes)
